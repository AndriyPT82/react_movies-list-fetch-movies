{"version":3,"sources":["components/MovieCard/MovieCard.jsx","components/MoviesList/MoviesList.jsx","components/Popup/Popup.jsx","helpers.js","components/FindMovie/FindMovie.jsx","App.jsx","index.js"],"names":["MovieCard","React","memo","title","description","imgUrl","imdbId","className","src","alt","href","slice","propTypes","PropTypes","string","isRequired","MoviesList","movies","map","movie","key","Popup","error","moviesFromServer","moviesIds","callBack","closePopup","useState","moviesObject","setMovies","type","onClick","Object","values","disabled","keys","length","role","styling","tabIndex","classNames","includes","choisenMovie","aria-hidden","getMoviesFromServer","setTitle","handleAdd","handleError","a","fetch","response","ok","json","resultObject","Error","Search","Promise","all","imdbID","then","r","moviesList","Title","Plot","Poster","FindMovie","addNewMovies","setMoviesList","setError","TextField","style","width","variant","label","value","onChange","event","target","currentTarget","list","App","state","setState","this","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8cbd2d34.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = React.memo(({\n  title,\n  description = '',\n  imgUrl,\n  imdbId,\n}) => (\n  <div className=\"movie\">\n    <img className=\"movie__poster\" src={imgUrl} alt=\"Film logo\" />\n\n    <div className=\"movie__info\">\n      <div className=\"movie__title-box\">\n        <img className=\"imdb-logo\" src=\"images/imdb-logo.jpeg\" alt=\"\" />\n        <a\n          href={`https://www.imdb.com/title/${imdbId}`}\n          className=\"movie__title\"\n        >\n          <p>\n            {' '}\n            {title}\n          </p>\n        </a>\n      </div>\n\n      <p className=\"movie__description\">\n        {description.slice(0, 150)}\n        ...\n      </p>\n    </div>\n  </div>\n));\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  imgUrl: PropTypes.string.isRequired,\n  imdbId: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({\n  movies = [],\n}) => (\n\n  <ul className=\"movies-list\">\n    {\n      movies.map(movie => (\n        <li className=\"wrapper\" key={movie.imdbId}>\n          <MovieCard {...movie} />\n        </li>\n      ))\n    }\n  </ul>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbId: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { MovieCard } from '../MovieCard';\nimport './Popup.scss';\n\nexport const Popup = ({\n  error,\n  moviesFromServer,\n  moviesIds,\n  callBack,\n  closePopup,\n}) => {\n  const [moviesObject, setMovies] = useState({});\n\n  const handleUserChoise = (choisenMovie) => {\n    if (!moviesObject[choisenMovie]) {\n      setMovies(movies => ({\n        ...movies, [choisenMovie.imdbId]: choisenMovie,\n      }));\n    } else {\n      delete moviesObject[choisenMovie.imdbId];\n      setMovies(moviesObject);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"popup__content\">\n        <button\n          className=\"btn-add\"\n          type=\"button\"\n          onClick={() => callBack(Object.values(moviesObject))}\n          disabled={!Object.keys(moviesObject).length}\n        >\n          ADD\n        </button>\n\n        <button\n          className=\"btn-close\"\n          type=\"button\"\n          onClick={() => closePopup([])}\n        >\n          X\n        </button>\n\n        {\n          !error && moviesFromServer.map(movie => (\n            <li\n              className=\"wrapper\"\n              key={movie.imdbId}\n            >\n              <span\n                role=\"button\"\n                styling=\"link\"\n                tabIndex={0}\n                className={classNames(\n                  'card',\n                  {\n                    'is-in-list': moviesIds.includes(movie.imdbId),\n                    'is-choisen': !!moviesObject[movie.imdbId],\n                  },\n                )}\n                onClick={() => {\n                  if (!moviesIds.includes(movie.imdbId)) {\n                    handleUserChoise(movie);\n                  }\n                }}\n                aria-hidden\n              >\n                <MovieCard\n                  {...movie}\n                />\n              </span>\n            </li>\n          ))\n        }\n      </div>\n    </>\n  );\n};\n\nPopup.propTypes = {\n  error: PropTypes.string.isRequired,\n  moviesFromServer: PropTypes.arrayOf(\n    PropTypes.object.isRequired,\n  ).isRequired,\n  moviesIds: PropTypes.arrayOf(\n    PropTypes.string.isRequired,\n  ).isRequired,\n  callBack: PropTypes.func.isRequired,\n  closePopup: PropTypes.func.isRequired,\n};\n","\nconst BASE_URL = 'https://www.omdbapi.com/?apikey=b8cd40cf&s=';\n\nexport const getMoviesFromServer = async(\n  title,\n  setTitle,\n  handleAdd,\n  handleError,\n) => {\n  const response = await fetch(`${BASE_URL}${title}`);\n\n  if (!response.ok) {\n    return false;\n  }\n\n  const resultObject = await response.json();\n\n  if (resultObject.Error) {\n    handleError(resultObject.Error);\n\n    return false;\n  }\n\n  const moviesFromServer = await resultObject.Search;\n  const moviesList = await Promise.all(moviesFromServer.map(movie => (\n    fetch(`https://www.omdbapi.com/?apikey=b8cd40cf&i=${movie.imdbID}`)\n      .then(r => r.json()))));\n\n  handleAdd(moviesList.map(movie => ({\n    title: movie.Title,\n    description: movie.Plot,\n    movie: movie.imdbID,\n    imgUrl: movie.Poster,\n    imdbId: movie.imdbID,\n  })));\n\n  setTitle('');\n\n  return true;\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { TextField } from '@material-ui/core';\nimport { Popup } from '../Popup';\nimport { getMoviesFromServer } from '../../helpers';\nimport './FindMovie.scss';\n\nexport const FindMovie = React.memo(({ moviesIds, addNewMovies }) => {\n  const [title, setTitle] = useState('');\n  const [moviesFromServer, setMoviesList] = useState([]);\n  const [error, setError] = useState('');\n\n  const handleUserChoise = (list) => {\n    addNewMovies(list);\n    setMoviesList([]);\n  };\n\n  return (\n    <>\n      <div className=\"find-movie\">\n        <TextField\n          error={!!error}\n          style={{\n            width: 300,\n          }}\n          variant=\"outlined\"\n          label={!error ? 'Movie Title' : error}\n          value={title}\n          onChange={(event) => {\n            setTitle(event.target.value);\n            setError('');\n          }}\n        />\n        <button\n          type=\"button\"\n          className=\"button\"\n          disabled={title.length < 3}\n          onClick={() => {\n            getMoviesFromServer(title, setTitle, setMoviesList, setError);\n          }}\n        >\n          Find Movie\n        </button>\n      </div>\n\n      <div\n        role=\"link\"\n        styling=\"link\"\n        tabIndex={0}\n        className={`popup ${!moviesFromServer.length && 'is-hidden'}`}\n        onClick={(event) => {\n          if (event.currentTarget === event.target) {\n            setMoviesList([]);\n          }\n        }}\n        aria-hidden\n      >\n        {\n          !!moviesFromServer.length\n          && (\n            <Popup\n              error={error}\n              moviesIds={moviesIds}\n              moviesFromServer={moviesFromServer}\n              callBack={handleUserChoise}\n              closePopup={setMoviesList}\n            />\n          )\n        }\n      </div>\n    </>\n  );\n});\n\nFindMovie.propTypes = {\n  moviesIds: PropTypes.arrayOf(\n    PropTypes.string.isRequired,\n  ).isRequired,\n  addNewMovies: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addNewMovies = (movies) => {\n    this.setState(state => ({\n      movies: [...state.movies, ...movies],\n    }));\n  }\n\n  render() {\n    const { movies } = this.state;\n    const moviesIds = movies.map(movie => movie.imdbId);\n\n    return (\n      <div className=\"App\">\n        <header className=\"header\">\n          <h1 className=\"title\">Movies</h1>\n          <div className=\"controlers-block\">\n            <FindMovie\n              moviesIds={moviesIds}\n              addNewMovies={this.addNewMovies}\n            />\n          </div>\n        </header>\n        <main className=\"main\">\n          <MoviesList movies={movies} />\n        </main>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}