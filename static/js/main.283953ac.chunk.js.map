{"version":3,"sources":["components/MovieCard/MovieCard.jsx","components/MoviesList/MoviesList.jsx","components/Popup/Popup.jsx","components/FindMovie/FindMovie.jsx","App.jsx","index.js"],"names":["MovieCard","React","memo","title","description","imgUrl","imdbId","className","src","alt","href","slice","propTypes","PropTypes","string","isRequired","MoviesList","movies","map","movie","key","Popup","error","moviesFromServer","moviesIds","callBack","closePopup","useState","choisenMoviesList","handleChange","type","onClick","disabled","length","role","styling","tabIndex","style","cursor","includes","classNames","choisenMovie","filter","onKeyDown","getMoviesFromServer","setTitle","handleAdd","handleError","a","fetch","response","ok","json","resultObject","Error","Search","Promise","all","imdbID","then","r","moviesList","Title","Plot","Poster","FindMovie","addNewMovies","TextField","width","variant","label","value","onChange","event","target","visibility","currentTarget","list","App","state","setState","this","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.283953ac.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = React.memo(({\n  title,\n  description = '',\n  imgUrl,\n  imdbId,\n}) => (\n  <div\n    className=\"movie\"\n  >\n    <img className=\"movie__poster\" src={imgUrl} alt=\"Film logo\" />\n\n    <div className=\"movie__info\">\n\n      <div className=\"movie__title-box\">\n\n        <img className=\"imdb-logo\" src=\"images/imdb-logo.jpeg\" alt=\"\" />\n\n        <a\n          href={`https://www.imdb.com/title/${imdbId}`}\n          className=\"movie__title\"\n        >\n          <p>\n            {' '}\n            {title}\n          </p>\n        </a>\n      </div>\n\n      <p className=\"movie__description\">\n        {description.slice(0, 150)}\n        ...\n      </p>\n    </div>\n  </div>\n));\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  imgUrl: PropTypes.string.isRequired,\n  imdbId: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({\n  movies = [],\n}) => (\n\n  <ul className=\"movies-list\">\n    {\n      movies.map(movie => (\n        <li className=\"wrapper\" key={movie.imdbId}>\n          <MovieCard {...movie} />\n        </li>\n      ))\n    }\n  </ul>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbId: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n\n// <div className=\"movies\">\n//   {movies.map(movie => (\n//     <MovieCard key={movie.imdbId} {...movie} />\n//   ))}\n// </div>\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { MovieCard } from '../MovieCard';\nimport './Popup.scss';\n\nexport const Popup = ({ error,\n  moviesFromServer,\n  moviesIds,\n  callBack,\n  closePopup }) => {\n  const [choisenMoviesList, handleChange] = useState([]);\n\n  const handleUserChoise = (choisenMovie) => {\n    if (!choisenMoviesList.includes(choisenMovie)) {\n      handleChange(movies => [...movies, choisenMovie]);\n    } else {\n      handleChange(movies => movies.filter(movie => movie !== choisenMovie));\n    }\n  };\n\n  return (\n    <>\n\n      <div className=\"popup__content\">\n        {/* <div className=\"popup__controlers-block\"> */}\n\n        <button\n          className=\"btn-add\"\n          type=\"button\"\n          onClick={() => {\n            callBack(choisenMoviesList);\n          }}\n          disabled={!choisenMoviesList.length}\n        >\n          ADD\n        </button>\n\n        <button\n          className=\"btn-close\"\n          type=\"button\"\n          onClick={() => closePopup([])}\n        >\n          X\n        </button>\n\n        {/* </div> */}\n\n        {\n          !error && moviesFromServer.map(movie => (\n            <li\n              className=\"wrapper\"\n              key={movie.imdbId}\n            >\n              <span\n                role=\"button\"\n                styling=\"link\"\n                tabIndex={0}\n                style={{\n                  cursor: !moviesIds.includes(movie.imdbId) && 'pointer',\n                }}\n                className={classNames(\n                  'card',\n                  {\n                    'is-in-list': moviesIds.includes(movie.imdbId),\n                    'is-choisen': choisenMoviesList.includes(movie),\n                  },\n                )}\n                onClick={() => {\n                  if (!moviesIds.includes(movie.imdbId)) {\n                    handleUserChoise(movie);\n                  }\n                }}\n\n                onKeyDown={() => { }}\n              >\n                <MovieCard\n                  {...movie}\n                />\n              </span>\n            </li>\n          ))\n        }\n      </div>\n    </>\n  );\n};\n\nPopup.propTypes = {\n  error: PropTypes.string.isRequired,\n  moviesFromServer: PropTypes.arrayOf(\n    PropTypes.object.isRequired,\n  ).isRequired,\n  moviesIds: PropTypes.arrayOf(\n    PropTypes.string.isRequired,\n  ).isRequired,\n  callBack: PropTypes.func.isRequired,\n  closePopup: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { TextField } from '@material-ui/core';\nimport { Popup } from '../Popup';\nimport './FindMovie.scss';\n\nconst BASE_URL = 'https://www.omdbapi.com/?apikey=b8cd40cf&s=';\n\nconst getMoviesFromServer = async(title, setTitle, handleAdd, handleError) => {\n  const response = await fetch(`${BASE_URL}${title}`);\n\n  if (!response.ok) {\n    return false;\n  }\n\n  const resultObject = await response.json();\n\n  if (resultObject.Error) {\n    handleError(resultObject.Error);\n\n    return false;\n  }\n\n  const moviesFromServer = await resultObject.Search;\n  const moviesList = await Promise.all(moviesFromServer.map(movie => (\n    fetch(`https://www.omdbapi.com/?apikey=b8cd40cf&i=${movie.imdbID}`)\n      .then(r => r.json()))));\n\n  handleAdd(moviesList.map(movie => ({\n    title: movie.Title,\n    description: movie.Plot,\n    movie: movie.imdbID,\n    imgUrl: movie.Poster,\n    imdbId: movie.imdbID,\n  })));\n\n  setTitle('');\n\n  return true;\n};\n\nexport const FindMovie = React.memo(({ moviesIds, addNewMovies }) => {\n  const [title, setTitle] = useState('');\n  const [moviesFromServer, handleChange] = useState([]);\n  const [error, handleError] = useState('');\n\n  const handleUserChoise = (list) => {\n    addNewMovies(list);\n    handleChange([]);\n  };\n\n  return (\n    <>\n      <div className=\"find-movie\">\n        <TextField\n          error={!!error}\n          style={{\n            width: 300,\n          }}\n          variant=\"outlined\"\n          label={!error ? 'Movie Title' : error}\n          value={title}\n          onChange={(event) => {\n            setTitle(event.target.value);\n            handleError('');\n          }}\n        />\n        <button\n          type=\"button\"\n          className=\"button\"\n          disabled={title.length < 3}\n          onClick={() => {\n            getMoviesFromServer(title, setTitle, handleChange, handleError);\n          }}\n        >\n          Find Movie\n        </button>\n      </div>\n\n      <div\n        role=\"link\"\n        styling=\"link\"\n        tabIndex={0}\n        className=\"popup\"\n        style={{ visibility: moviesFromServer.length ? 'visible' : 'hidden' }}\n        onClick={(event) => {\n          if (event.currentTarget === event.target) {\n            handleChange([]);\n          }\n        }}\n        onKeyDown={() => { }}\n      >\n        {\n          !!moviesFromServer.length\n          && (\n            <Popup\n              error={error}\n              moviesIds={moviesIds}\n              moviesFromServer={moviesFromServer}\n              callBack={handleUserChoise}\n              closePopup={handleChange}\n            />\n          )\n        }\n      </div>\n    </>\n  );\n});\n\nFindMovie.propTypes = {\n  moviesIds: PropTypes.arrayOf(\n    PropTypes.string.isRequired,\n  ).isRequired,\n  addNewMovies: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addNewMovies = (movies) => {\n    this.setState(state => ({\n      movies: [...state.movies, ...movies],\n    }));\n  }\n\n  render() {\n    const { movies } = this.state;\n    const moviesIds = movies.map(movie => movie.imdbId);\n\n    return (\n      <div className=\"App\">\n        <header className=\"header\">\n          <h1 className=\"title\">Movies</h1>\n          <div className=\"controlers-block\">\n            <FindMovie\n              moviesIds={moviesIds}\n              addNewMovies={this.addNewMovies}\n            />\n          </div>\n        </header>\n        <main className=\"main\">\n          <MoviesList movies={movies} />\n        </main>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}