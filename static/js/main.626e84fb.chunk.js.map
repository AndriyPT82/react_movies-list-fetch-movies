{"version":3,"sources":["components/MovieCard/MovieCard.jsx","components/MoviesList/MoviesList.jsx","components/Popup/Popup.jsx","components/FindMovie/FindMovie.jsx","App.jsx","index.js"],"names":["MovieCard","React","memo","title","description","imgUrl","imdbId","className","src","alt","href","slice","MoviesList","movies","map","movie","key","Popup","error","moviesFromServer","moviesIds","callBack","useState","choisenMoviesList","handleChange","type","onClick","style","margin","cursor","includes","classNames","choisenMovie","filter","x","handleUserChoise","getMoviesFromServer","setTitle","handleAdd","handleError","a","fetch","response","ok","Error","json","resultObject","Search","Promise","all","imdbID","then","r","moviesList","Title","Plot","Poster","FindMovie","addNewMovies","TextField","width","variant","label","value","onChange","event","target","disabled","length","visibility","list","App","state","newMovies","setState","this","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.626e84fb.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './MovieCard.scss';\nimport PropTypes from 'prop-types';\n\n\n\nexport const MovieCard = React.memo(({\n  title,\n  description = '',\n  imgUrl,\n  imdbId,\n}\n) => {\n\n\n\n  return (\n    <div\n      className='movie'\n    >\n      <img className=\"movie__poster\" src={imgUrl} alt=\"Film logo\" />\n\n      <div className=\"movie__info\">\n\n        <div className=\"movie__title-box\">\n\n          <img className=\"imdb-logo\" src=\"images/imdb-logo.jpeg\" alt=\"\" />\n\n          <a href={`https://www.imdb.com/title/${imdbId}`} className=\"movie__title\">\n            <p> {title}</p>\n          </a>\n        </div>\n\n\n        <p className=\"movie__description\">{description.slice(0, 120)}...</p>\n      </div>\n    </div>)\n});\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  imgUrl: PropTypes.string.isRequired,\n  imdbId: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport classNames  from 'classnames'\n\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({\n  movies = [],\n}) => (\n\n  <ul className=\"movies-list\">\n    {\n      movies.map(movie => (\n        <li className=\"wrapper\" key={movie.imdbId}>\n            <MovieCard  {...movie} />\n        </li>\n      ))\n    }\n  </ul>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbId: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n\n\n\n\n\n  // <div className=\"movies\">\n  //   {movies.map(movie => (\n  //     <MovieCard key={movie.imdbId} {...movie} />\n  //   ))}\n  // </div>\n","import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { MovieCard } from '../MovieCard';\n\n\n\n\nexport const Popup = ({ error, moviesFromServer, moviesIds, callBack }) => {\n\n  const [choisenMoviesList, handleChange] = useState([])\n\n  const handleUserChoise = (choisenMoviesList, choisenMovie) => {\n    !choisenMoviesList.includes(choisenMovie)\n      ? handleChange(movies => [...movies, choisenMovie])\n      : handleChange(movies => movies.filter(x => x !== choisenMovie))\n  }\n\n\n  return (\n    <>\n      <button type=\"button\" onClick={() => {\n        callBack(choisenMoviesList)\n      }}>\n        ADD\n      </button>\n\n\n      <div className=\"popup__content\">\n        {\n          !error && moviesFromServer.map(movie => {\n            return (\n              <li\n                className='wrapper'\n                key={movie.imdbId}\n              >\n                <span\n                  style={{\n                    margin: 'auto',\n                    cursor: !moviesIds.includes(movie.imdbId) && 'pointer'\n                  }}\n                  className={classNames({\n                    'is-in-list': moviesIds.includes(movie.imdbId),\n                    'is-choisen': choisenMoviesList.includes(movie)\n                  })}\n                  onClick={!moviesIds.includes(movie.imdbId) && (() => handleUserChoise(choisenMoviesList, movie))}\n                  \n                >\n                  <MovieCard\n                    {...movie}\n                  />\n                </span>\n              </li>\n            )\n          })\n        }\n      </div>\n    </>\n  )\n\n}\n","import React, { useState, useEffect } from 'react';\n// import classNames from 'classnames'\nimport { TextField } from '@material-ui/core'\nimport './FindMovie.scss';\n\nimport { Popup } from '../Popup'\n\nconst BASE_URL = 'https://www.omdbapi.com/?apikey=b8cd40cf&s='\n\n\n\n\nconst getMoviesFromServer = async (title, setTitle, handleAdd, handleError) => {\n  const response = await fetch(`${BASE_URL}${title}`);\n\n  if (!response.ok) {\n    return new Error('Error');\n  }\n\n  const resultObject = await response.json();\n\n  if (resultObject.Error) {\n    handleError(resultObject.Error);\n    return;\n  }\n\n  const moviesFromServer = await resultObject.Search;\n  const moviesList = await Promise.all(moviesFromServer.map(movie => (\n    fetch(`https://www.omdbapi.com/?apikey=b8cd40cf&i=${movie.imdbID}`).then(r => r.json()))\n  ))\n\n  handleAdd(moviesList.map(movie => ({\n    title: movie.Title,\n    description: movie.Plot,\n    movie: movie.imdbID,\n    imgUrl: movie.Poster,\n    imdbId: movie.imdbID\n  })))\n\n  setTitle('')\n}\n\n\n\nexport const FindMovie = React.memo(({ moviesIds, addNewMovies }) => {\n  const [title, setTitle] = useState('');\n  const [moviesFromServer, handleChange] = useState([])\n  const [error, handleError] = useState('')\n\n  const callBack = (list) => {\n    addNewMovies(list)\n    handleChange([])\n  }\n\n  return <>\n    <div className=\"find-movie\">\n      <TextField\n        error={!!error}\n        style={{\n          width: 300,\n        }}\n        variant=\"outlined\"\n        label={!error ? \"Movie Title\" : error}\n        value={title}\n        onChange={(event) => {\n          setTitle(event.target.value)\n          handleError('')\n        }}\n      />\n\n      <button\n        type=\"button\"\n        className=\"button\"\n        disabled={title.length < 3}\n        onClick={() => {\n          getMoviesFromServer(title, setTitle, handleChange, handleError)\n        }}\n      >\n        Find Movie\n      </button>\n    </div>\n\n    <div\n      className=\"popup\"\n      style={{ visibility: !!moviesFromServer.length ? 'visible' : 'hidden' }}\n    >\n      <button\n        type=\"button\"\n        onClick={() => handleChange([])}\n      >\n        CLOSE\n      </button>\n      {\n        !!moviesFromServer.length && <Popup\n          error={error}\n          moviesIds={moviesIds}\n          moviesFromServer={moviesFromServer}\n          callBack={callBack}\n        />\n      }\n    </div>\n  </>\n});\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n    newMovies: [],\n  };\n\n  addNewMovies = (movies) => {\n    this.setState(state => ({\n      movies: [...state.movies, ...movies]\n    }))\n  }\n\n  render() {\n    const { movies } = this.state;\n    const moviesIds = movies.map(movie => movie.imdbId)\n\n    return (\n      <div className=\"App\">\n        <header className=\"header\">\n          <h1 className=\"title\">Movies Site</h1>\n          <div className=\"controlers-block\">\n            <FindMovie\n              moviesIds={moviesIds}\n              addNewMovies={this.addNewMovies}\n            />\n          </div>\n        </header>\n        <main className=\"main\">\n          <MoviesList movies={movies} />\n        </main>\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}